Detailed description of the implementation:
In this program, we implement a 32-bit ALU. Its operations include AND, OR, addition, subtraction, NOR, NAND and SLT (set less than). 
First, we have to write a 1-bit ALU, which is name as ¡°alu_top¡±. In ¡°alu_top¡±, we do five functions, which is ¡°mux_2¡±, ¡°and¡±, ¡°or¡±, ¡°add¡± and ¡°mux¡±. In ¡°mux_2¡±, we determine the answer whether need to do invert or not. If the first bit of ALU_control input is 1, we do invert. The ¡°and¡± and ¡°or¡± operation, we just simply use the and and or operation which is already stored in the system. In the ¡°add¡± function, we add a and b together and store the answer and the carry. The carry will added to the next 1-bit ALU and if there is overflow ,will be save to ¡°overflow¡±. In the ¡°mux¡± function, we choose the result according to the inputted operation and output it. 
After completed the ¡°alu_top¡±, we started to complete the 32_bit alu. In the 32-bit ALU, is rst_n is equal to 1, we started to load the input which is src1 and src2 into srctmp1 and arctmp2. Then, we combine the all thirty-two 1_bit alu. For the operation ¡°SLT¡±, we find the result of the 32th bit alu and store it into ¡°less¡±. We also write a ¡°compare¡± function for the bonus part. In the ¡°compare¡±, we do the operation according the input of ALU control. If we need to determine ¡°set less than¡±, we simply use the ¡°less¡± we wrote. If we need to determine ¡°set great than¡± , we invert the result of ¡°less¡±. To determine ¡°set less equal¡±, we or operation on ¡°less¡± and ¡°equal¡±. We or operation on invert of ¡°less¡± and ¡°equal¡± if we need to determine ¡°set more equal¡±. We use or operation on srctmp1 and srctmp2 and store to ¡° set equal¡± is to determine whether it is equal or not. If we need to determine ¡°set not equal¡±, just invert the result of using or operation on srctmp1 and srctmp2.

Problems encountered and solutions:
The biggest problem of this lab is that we have the separate the 32_bits alu into 1_bit alu. We can¡¯t just simply do operation by 32_bits, like ¡°result=a+b¡± or ¡°if(a<b) result=1¡±. The solution of the problem is the write the 1 bit alu and passing carryout to the next bit. After that, combine the 32 1_bit alu.


Lesson learnt (if any):
